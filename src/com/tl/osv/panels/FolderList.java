/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tl.osv.panels;

import com.tl.osv.AbstractPanel;
import com.tl.osv.Common;
import com.tl.osv.Log;
import com.tl.osv.Mls;
import com.tl.osv.OSMain;
import com.tl.osv.analit.method.AbstractMethod;
import com.tl.osv.analit.method.AbstractMethodFactory;
import com.tl.osv.util.Factory;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author root
 */
public class FolderList extends AbstractPanel {
    boolean isMethod;
    File baseFolder;
    String nameSufix;
    AbstractMethodFactory factory;
    /**
     * Creates new form FolderList
     * @param name
     * @param folderName
     * @param isMethod
     * @param factory
     * @throws java.lang.Exception
     */
    public FolderList(String name,String folderName,boolean isMethod,
            AbstractMethodFactory factory) throws Exception {
        super(Mls.translate(name));
        this.factory = factory;
        if(isMethod)
            nameSufix = "Method";
        else
            nameSufix = "Measuring";
        this.baseFolder = new File(folderName);
        if(this.baseFolder.exists() == false)
            this.baseFolder.mkdir();
        initComponents();
        this.isMethod = isMethod;
        initList();
        labelListTitle.setText(Mls.translate("#FolderListTitle"+nameSufix));
        buttonCreateNew.setText(Mls.translate("#FolderListNew"+nameSufix));
        buttonDelete.setText(Mls.translate("#FolderListDelete"+nameSufix));
        buttonOpen.setText(Mls.translate("#FolderListOpen"+nameSufix));
    }

    final void initList() throws Exception{
        DefaultListModel<AbstractMethod> model = new DefaultListModel<>();
        File[] list = baseFolder.listFiles();
        for(File fl : list)
            model.addElement(factory.getInstance(fl));
        listFolder.setModel(model);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        labelListTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listFolder = new javax.swing.JList();
        buttonCreateNew = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        labelPreview = new javax.swing.JLabel();
        buttonOpen = new javax.swing.JButton();

        labelListTitle.setText("#List");

        listFolder.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listFolder.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listFolderValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listFolder);

        buttonCreateNew.setText("#New");
        buttonCreateNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCreateNewActionPerformed(evt);
            }
        });

        buttonDelete.setText("#Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(buttonDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(labelListTitle)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(buttonCreateNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(labelListTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonCreateNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDelete))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        labelPreview.setText("-");
        labelPreview.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jScrollPane2.setViewportView(labelPreview);

        buttonOpen.setText("#Open");
        buttonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(buttonOpen, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonOpen))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCreateNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCreateNewActionPerformed
        try{
            String name = JOptionPane.showInputDialog(OSMain.Main, 
                    Mls.translate("#FolderListEnterMethodName"+nameSufix), 
                    Mls.translate("#FolderListNewMethod"+nameSufix), 
                    JOptionPane.QUESTION_MESSAGE);
            if(name == null)
                return;
            String path = baseFolder.getAbsolutePath()+File.separator;
            path += name;
            File fl = new File(path);
            if(fl.mkdir() == false)
                throw new Exception("Can't create folder: "+fl.getAbsolutePath());
            AbstractMethod method = Common.getDevice().createCalibrMethod(fl);
            initList();
        }catch(Exception ex){
            Log.exception(ex);
        }
    }//GEN-LAST:event_buttonCreateNewActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        try{
            AbstractMethod name = (AbstractMethod)listFolder.getSelectedValue();
            if(name == null)
                return;
        }catch(Exception ex){
            Log.exception(ex);
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenActionPerformed
        try{
            AbstractMethod name = (AbstractMethod)listFolder.getSelectedValue();
            if(name == null)
                return;
        }catch(Exception ex){
            Log.exception(ex);
        }
    }//GEN-LAST:event_buttonOpenActionPerformed

    private void listFolderValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listFolderValueChanged
        try{
            AbstractMethod name = (AbstractMethod)listFolder.getSelectedValue();
            if(name == null){
                labelPreview.setText("");
                return;
            }
            labelPreview.setText(name.getDescription());
        }catch(Exception ex){
            Log.exception(ex);
        }
    }//GEN-LAST:event_listFolderValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCreateNew;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonOpen;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel labelListTitle;
    private javax.swing.JLabel labelPreview;
    private javax.swing.JList listFolder;
    // End of variables declaration//GEN-END:variables

    @Override
    public void closeOnExit() throws Exception {
    }

    @Override
    protected void init() throws Exception {
    }

    @Override
    public void showed() {
    }

    @Override
    public boolean hiding() throws Exception {
        return true;
    }
}
