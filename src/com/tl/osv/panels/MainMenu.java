/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tl.osv.panels;

import com.tl.osv.AbstractPanel;
import com.tl.osv.Common;
import com.tl.osv.Log;
import com.tl.osv.OSMain;
import com.tl.osv.analit.method.MLSimpleCalibrMethod;
import com.tl.osv.serv.GuiDecorator;
import java.io.File;

/**
 *
 * @author root
 */
public class MainMenu extends AbstractPanel {
    /**
     * Creates new form MainMenu
     */
    public MainMenu() {
        super("#MainMenu");
        initComponents();
        GuiDecorator.decorateMainMenu(buttonSetup,"mm_setup");
        GuiDecorator.decorateMainMenu(buttonMeasuringByMethod,"mm_measurin");
        GuiDecorator.decorateMainMenu(buttonMeasuringUnknown,"mm_measuring_unknown");
        GuiDecorator.decorateMainMenu(buttonMethodEditor,"mm_meditor");
        GuiDecorator.decorateMainMenu(buttonStandardLibrary,"mm_stlib");
    }

    public String getDataFolder(String name) throws Exception{
        return Common.getDataDirectory(name)+File.separator;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMenu = new javax.swing.JPanel();
        buttonMeasuringUnknown = new javax.swing.JButton();
        buttonMeasuringByMethod = new javax.swing.JButton();
        buttonMethodEditor = new javax.swing.JButton();
        buttonStandardLibrary = new javax.swing.JButton();
        buttonSetup = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout(30, 30));

        panelMenu.setLayout(new java.awt.GridLayout(3, 2, 30, 30));

        buttonMeasuringUnknown.setText("#MeasuringUnknown");
        buttonMeasuringUnknown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMeasuringUnknownActionPerformed(evt);
            }
        });
        panelMenu.add(buttonMeasuringUnknown);

        buttonMeasuringByMethod.setText("#MeasuringByMethod");
        buttonMeasuringByMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMeasuringByMethodActionPerformed(evt);
            }
        });
        panelMenu.add(buttonMeasuringByMethod);

        buttonMethodEditor.setText("#MethodEditor");
        buttonMethodEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMethodEditorActionPerformed(evt);
            }
        });
        panelMenu.add(buttonMethodEditor);

        buttonStandardLibrary.setText("#StandardLibrary");
        buttonStandardLibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStandardLibraryActionPerformed(evt);
            }
        });
        panelMenu.add(buttonStandardLibrary);

        buttonSetup.setText("#Setup");
        buttonSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSetupActionPerformed(evt);
            }
        });
        panelMenu.add(buttonSetup);

        add(panelMenu, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSetupActionPerformed
        try{
            OSMain.Main.getPanelDriver().show(Common.panelSetup);
        }catch(Exception ex){
            Log.exception(ex);
        }
    }//GEN-LAST:event_buttonSetupActionPerformed

    MeasuringUnknown unknownMeasuring;
    private void buttonMeasuringUnknownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMeasuringUnknownActionPerformed
        try{
            if(unknownMeasuring == null)
                unknownMeasuring = new MeasuringUnknown("#Measuring unknown",
                        getDataFolder("unknown"));
            OSMain.Main.getPanelDriver().show(unknownMeasuring);
        }catch(Exception ex){
            Log.exception(ex);
        }
    }//GEN-LAST:event_buttonMeasuringUnknownActionPerformed

    FolderList knownMeasurings;
    private void buttonMeasuringByMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMeasuringByMethodActionPerformed
        try{
            if(knownMeasurings == null)
                knownMeasurings = new FolderList("#Measuring by calibrating",
                        getDataFolder("knowns"),
                        false, (File baseFolder) -> new MLSimpleCalibrMethod(baseFolder));
            OSMain.Main.getPanelDriver().show(knownMeasurings);
        }catch(Exception ex){
            Log.exception(ex);
        }
    }//GEN-LAST:event_buttonMeasuringByMethodActionPerformed

    StandardEditor stEditor;
    private void buttonStandardLibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStandardLibraryActionPerformed
        try{
            if(stEditor == null)
                stEditor = new StandardEditor();
            OSMain.Main.getPanelDriver().show(stEditor);
        }catch(Exception ex){
            Log.exception(ex);
        }
    }//GEN-LAST:event_buttonStandardLibraryActionPerformed

    FolderList knownMethods;
    private void buttonMethodEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMethodEditorActionPerformed
        try{
            if(knownMethods == null)
                knownMethods = new FolderList("#Calibratings",
                        getDataFolder("calibrs"),true,
                (File baseFolder) -> new MLSimpleCalibrMethod(baseFolder));
            OSMain.Main.getPanelDriver().show(knownMethods);
        }catch(Exception ex){
            Log.exception(ex);
        }
    }//GEN-LAST:event_buttonMethodEditorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonMeasuringByMethod;
    private javax.swing.JButton buttonMeasuringUnknown;
    private javax.swing.JButton buttonMethodEditor;
    private javax.swing.JButton buttonSetup;
    private javax.swing.JButton buttonStandardLibrary;
    private javax.swing.JPanel panelMenu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void closeOnExit() throws Exception {
    }

    @Override
    protected void init() throws Exception {
    }

    @Override
    public void showed() {
    }

    @Override
    public boolean hiding() throws Exception {
        return true;
    }
}
